<?php

namespace MohamadRZ\NovaPerms\model;

use MohamadRZ\NovaPerms\node\AbstractNode;
use MohamadRZ\NovaPerms\node\resolver\NodePermissionResolver;
use MohamadRZ\NovaPerms\node\resolver\PermissionUpdateTask;
use MohamadRZ\NovaPerms\node\Types\InheritanceNode;
use MohamadRZ\NovaPerms\node\Types\InheritanceNodeBuilder;
use MohamadRZ\NovaPerms\NovaPermsPlugin;
use pocketmine\permission\PermissionManager;
use pocketmine\player\OfflinePlayer;
use pocketmine\player\Player;
use pocketmine\permission\PermissionAttachment;
use pocketmine\Server;

class User extends PermissionHolder
{
    private array $groups = [];
    private string $name;
    private ?Player $parent;

    /** @var PermissionAttachment|null */
    private ?PermissionAttachment $attachment = null;
    private array $lastAppliedPermissions = [];

    public function __construct(string $playerName)
    {
        $this->name = $playerName;
    }

    public function getParent(): ?Player
    {
        $name = $this->name;
        return $this->parent = Server::getInstance()->getPlayerExact($name);
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    public function addGroup(string $groupName): void
    {
        $this->groups[] = $groupName;
    }

    public function getGroups(): array
    {
        return $this->groups;
    }

    public function attachToPlayer(): bool
    {
        $player = $this->getParent();
        if ($this->attachment === null && $player !== null) {
            $this->attachment = $player->addAttachment($player->getServer()->getPluginManager()->getPlugin("NovaPerms"));
            return true;
        }
        return false;
    }

    public function updatePermissions(): void
    {
        if ($this->attachment === null) {
            if (!$this->attachToPlayer()) {
                return;
            }
        }

        $groupManager = NovaPermsPlugin::getGroupManager();

        $groupPermissionsMap = [];
        $groupInheritanceMap = [];
        foreach ($groupManager->getAllGroups() as $group) {
            $groupName = $group->getName();
            $permissions = [];
            $inheritance = [];

            foreach ($group->getOwnPermissionNodes() as $node) {
                if ($node instanceof InheritanceNode) {
                    $inheritance[] = $node->getGroup();
                } else {
                    $permissions[$node->getKey()] = $node->getValue();
                }
            }
            $groupPermissionsMap[$groupName] = $permissions;
            $groupInheritanceMap[$groupName] = $inheritance;
        }

        $rootNodesAsArray = [];
        $playerNodes = $this->getOwnPermissionNodes();
        foreach ($this->getGroups() as $groupName) {
            $playerNodes[] = new InheritanceNode($groupName);
        }

        foreach ($playerNodes as $node) {
            if ($node instanceof InheritanceNode) {
                $rootNodesAsArray[] = ['type' => 'inheritance', 'group' => $node->getGroup()];
            } else {
                $rootNodesAsArray[] = ['type' => 'permission', 'key' => $node->getKey(), 'value' => $node->getValue()];
            }
        }

        $allKnownPermissions = $this->getAllKnownPermissions();
        $playerName = strtolower($this->getParent()->getName());

        $task = new PermissionUpdateTask(
            $playerName,
            serialize($rootNodesAsArray),
            serialize($allKnownPermissions),
            serialize($groupPermissionsMap),
            serialize($groupInheritanceMap)
        );

        Server::getInstance()->getAsyncPool()->submitTask($task);
    }

    /**
     * @return PermissionAttachment|null
     */
    public function getAttachment(): ?PermissionAttachment
    {
        if ($this->attachment === null) {
            if ($this->attachToPlayer()) {
                return $this->attachment;
            }
        }
        return null;
    }

    /**
     * @param array $lastAppliedPermissions
     */
    public function setLastAppliedPermissions(array $lastAppliedPermissions): void
    {
        $this->lastAppliedPermissions = $lastAppliedPermissions;
    }

    /**
     * @return array
     */
    public function getLastAppliedPermissions(): array
    {
        return $this->lastAppliedPermissions;
    }


    public function auditTemporaryNodes(): bool
    {
        $changed = parent::auditTemporaryNodes();

        if ($changed) {
            $this->updatePermissions();
        }

        return $changed;
    }

    public function addPermission(AbstractNode|string $node, bool $value = true): void
    {
        $this->updatePermissions();
        parent::addPermission($node, $value); // TODO: Change the autogenerated stub
    }
}
