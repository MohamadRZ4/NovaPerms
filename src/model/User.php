<?php

namespace MohamadRZ\NovaPerms\model;

use MohamadRZ\NovaPerms\node\AbstractNode;
use MohamadRZ\NovaPerms\node\resolver\NodePermissionResolver;
use MohamadRZ\NovaPerms\node\Types\InheritanceNode;
use MohamadRZ\NovaPerms\node\Types\InheritanceNodeBuilder;
use MohamadRZ\NovaPerms\NovaPermsPlugin;
use pocketmine\permission\PermissionManager;
use pocketmine\player\OfflinePlayer;
use pocketmine\player\Player;
use pocketmine\permission\PermissionAttachment;
use pocketmine\Server;

class User extends PermissionHolder
{
    private array $groups = [];
    private string $name;
    private ?Player $parent;

    /** @var PermissionAttachment|null */
    private ?PermissionAttachment $attachment = null;
    private array $lastAppliedPermissions = [];

    public function __construct(string $playerName)
    {
        $this->name = $playerName;
        $this->getParent();
    }

    public function getParent(): ?Player
    {
        $name = $this->name;
        return $this->parent = Server::getInstance()->getPlayerExact($name);
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    public function addGroup(string $groupName): void
    {
        $this->groups[] = $groupName;
    }

    public function getGroups(): array
    {
        return $this->groups;
    }

    public function attachToPlayer(): bool
    {
        $player = $this->getParent();
        if ($this->attachment === null && $player !== null) {
            $this->attachment = $player->addAttachment($player->getServer()->getPluginManager()->getPlugin("NovaPerms"));
            return true;
        }
        return false;
    }

    public function updatePermissions(): void
    {
        if ($this->attachment === null) {
            if (!$this->attachToPlayer()) {
                return;
            }
        }
        $rootNodes = $this->getOwnPermissionNodes();

        foreach ($this->getGroups() as $groupName) {
            $rootNodes[] = new InheritanceNode($groupName);
        }

        $currentPermissions = (new NodePermissionResolver($this->getAllKnownPermissions()))
            ->searchFromNodes(
                $rootNodes,
                NovaPermsPlugin::getGroupManager(),
                NodePermissionResolver::LEVEL_REGEX
            );

        $toAdd = array_diff_assoc($currentPermissions, $this->lastAppliedPermissions);
        $toRemove = array_diff_key($this->lastAppliedPermissions, $currentPermissions);

        foreach ($toRemove as $perm => $_) {
            $this->attachment->unsetPermission($perm);
        }

        foreach ($toAdd as $perm => $value) {
            $this->attachment->setPermission($perm, $value);
        }

        $this->lastAppliedPermissions = $currentPermissions;
    }

    public function auditTemporaryNodes(): bool
    {
        $changed = parent::auditTemporaryNodes();

        if ($changed) {
            $this->updatePermissions();
        }

        return $changed;
    }

    public function addPermission(AbstractNode|string $node, bool $value = true): void
    {
        parent::addPermission($node, $value); // TODO: Change the autogenerated stub
        $this->updatePermissions();
    }
}
