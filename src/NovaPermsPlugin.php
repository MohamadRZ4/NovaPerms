<?php

declare(strict_types=1);

namespace MohamadRZ\NovaPerms;

use MohamadRZ\NovaPerms\config\ConfigManager;
use MohamadRZ\NovaPerms\model\GroupManager;
use MohamadRZ\NovaPerms\model\UserManager;
use MohamadRZ\NovaPerms\node\Types\RegexPermission;
use MohamadRZ\NovaPerms\storage\Storage;
use MohamadRZ\NovaPerms\utils\ExecuteTimer;
use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\SingletonTrait;
use pocketmine\utils\TextFormat as TF;

class NovaPermsPlugin extends PluginBase {
    use SingletonTrait;

    private static string $datePath;
    private static ConfigManager $configManager;
    private static Storage $storage;
    private static GroupManager $groupManager;
    private static UserManager $userManager;

    protected function onLoad(): void
    {
        self::setInstance($this);
        parent::onLoad(); // TODO: Change the autogenerated stub
    }

    protected function onEnable(): void
    {
        $version = $this->getDescription()->getVersion();
        $softWareName = $this->getServer()->getName();
        $softVersion = $this->getServer()->getVersion();
        $logo = [
            "§b      __   ",
            "§b|\ | |__)  §eNovaPerms §bv$version    ",
            "§b| \| |     §8running on $softWareName - $softVersion  "
        ];
        foreach ($logo as $line) {
            $this->getLogger()->info($line);
        }

        $timer = new ExecuteTimer();

        self::$datePath = $this->getDataFolder();
        self::$configManager = new ConfigManager($this, $this->getDataFolder());
        self::$storage = new Storage($this);
        self::$groupManager = new GroupManager();
        self::$groupManager->loadDefaults();
        self::$userManager = new UserManager();

        $this->getServer()->getPluginManager()->registerEvents(new EventListener(), $this);
        $time = $timer->end();
        $this->getLogger()->info("Successfully enabled! (took " . $time . "ms)");
        parent::onEnable();
    }


    public static function getInstance(): NovaPermsPlugin
    {
        return self::$instance;
    }

    public static function getDatePath(): string
    {
        return self::$datePath;
    }



public function onCommand(CommandSender $sender, Command $command, string $label, array $args): bool
{
    if (strtolower($command->getName()) === "novaperms") {
        $arg = array_shift($args) ?? null;
        switch ($arg) {
            case "myinfo":
                $user = self::getUserManager()->getOrMake($sender->getName());
                $permissions = $user->getPermissions();

                $sender->sendMessage(TF::GOLD . str_repeat("-", 30));
                $sender->sendMessage(TF::YELLOW . " NovaPerms " . TF::GRAY . "User Info");
                $sender->sendMessage(TF::GOLD . str_repeat("-", 30));

                if (empty($permissions)) {
                    $sender->sendMessage(TF::GRAY . "You have no permissions assigned.");
                } else {
                    foreach ($permissions as $key => $node) {
                        $expiry = ($node->getExpiry() === -1)
                            ? TF::GREEN . "never"
                            : TF::RED . date("Y-m-d H:i:s", $node->getExpiry()) . TF::GRAY
                            . " (" . $this->formatTimeLeft($node->getExpiry()) . " left)";

                        $sender->sendMessage(
                            TF::AQUA . " - " . TF::WHITE . $key .
                            TF::DARK_GRAY . " | " . TF::GREEN . ($node->getValue() ? "true" : "false") .
                            TF::DARK_GRAY . " | " . TF::GRAY . "expires: " . $expiry
                        );
                    }
                }

                $sender->sendMessage(TF::GOLD . str_repeat("-", 30));
                return true;
                break;
            case "addperm":
                $user = self::getUserManager()->getOrMake($sender->getName());
                $user->addPermission(RegexPermission::builder("pocketmine.*")->build());
            default:
                $sender->sendMessage(TF::YELLOW . "Usage: /novaperms myinfo");
                break;
        }
    }
    return parent::onCommand($sender, $command, $label, $args);
}

private function formatTimeLeft(int $timestamp): string
{
    $secondsLeft = $timestamp - time();
    if ($secondsLeft <= 0) return "expired";

    $days = intdiv($secondsLeft, 86400);
    $hours = intdiv($secondsLeft % 86400, 3600);
    $minutes = intdiv($secondsLeft % 3600, 60);

    $parts = [];
    if ($days > 0) $parts[] = "{$days}d";
    if ($hours > 0) $parts[] = "{$hours}h";
    if ($minutes > 0) $parts[] = "{$minutes}m";

    return implode(" ", $parts);
}

    /**
     * @return Storage
     */
    public static function getStorage(): Storage
    {
        return self::$storage;
    }

    /**
     * @return GroupManager
     */
    public static function getGroupManager(): GroupManager
    {
        return self::$groupManager;
    }

    /**
     * @return UserManager
     */
    public static function getUserManager(): UserManager
    {
        return self::$userManager;
    }

    /**
     * @return ConfigManager
     */
    public static function getConfigManager(): ConfigManager
    {
        return self::$configManager;
    }
}
