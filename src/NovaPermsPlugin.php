<?php

declare(strict_types=1);

namespace MohamadRZ\NovaPerms;

use MohamadRZ\NovaPerms\configs\ConfigManager;
use MohamadRZ\NovaPerms\model\NodeManager;
use MohamadRZ\NovaPerms\model\UserManager;
use MohamadRZ\NovaPerms\timings\Timings;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\SingletonTrait;

class NovaPermsPlugin extends PluginBase {
    use SingletonTrait;

    private static string $datePath;
    private static ConfigManager $configManager;
    private static Timings $timings;
    private static NodeManager $permissionManager;
    private static UserManager $userManager;

    protected function onLoad(): void
    {
        self::setInstance($this);
        parent::onLoad(); // TODO: Change the autogenerated stub
    }

    protected function onEnable(): void
    {
        $version = $this->getDescription()->getVersion();
        $logo = "     
        
            §eNovaPerms §f| §bPermission & Ranks System
                         §7Version §a$version
            ";


        $this->getServer()->getLogger()->info($logo);
        self::$datePath = $this->getDataFolder();
        self::$configManager = new ConfigManager(self::$datePath);
        self::$timings = new Timings(self::$datePath."/timings/", self::$configManager);
        self::$permissionManager = new NodeManager();
        self::$userManager = new UserManager();

        parent::onEnable(); // TODO: Change the autogenerated stub
    }

    public static function getInstance(): NovaPermsPlugin
    {
        return self::$instance;
    }

    public static function getDatePath(): string
    {
        return self::$datePath;
    }

    /**
     * @return ConfigManager
     */
    public static function getConfigManager(): ConfigManager
    {
        return self::$configManager;
    }

    /**
     * @return Timings
     */
    public static function getTimings(): Timings
    {
        return self::$timings;
    }

    /**
     * @return NodeManager
     */
    public static function getPermissionManager(): NodeManager
    {
        return self::$permissionManager;
    }

    /**
     * @return UserManager
     */
    public static function getUserManager(): UserManager
    {
        return self::$userManager;
    }
}
